var documenterSearchIndex = {"docs":
[{"location":"functionindex/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"functionindex/","page":"Index","title":"Index","text":"","category":"page"},{"location":"functionindex/","page":"Index","title":"Index","text":"Modules = [Thebes]\nOrder   = [:function, :type]","category":"page"},{"location":"functionindex/#Luxor.between","page":"Index","title":"Luxor.between","text":"between(p1::Point3D, p2::Point3D, x=0.5)\nbetween((p1::Point3D, p2::Point3D), x=0.5)\n\nFind a point on a line between two 3D points. If x is 0.5, the returned point should be halfway between them.\n\n\n\n\n\n","category":"function"},{"location":"functionindex/#Luxor.distance-Tuple{Point3D,Point3D}","page":"Index","title":"Luxor.distance","text":"distance(p1::Point3D, p2::Point3D)\n\nReturn the distance between two points.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Luxor.midpoint-Tuple{Point3D,Point3D}","page":"Index","title":"Luxor.midpoint","text":"midpoint(pt1::Point3D, pt2::Point3D)\n\nFind the midpoint between two points. See also between().\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.anglebetweenvectors-Tuple{Point3D,Point3D}","page":"Index","title":"Thebes.anglebetweenvectors","text":"anglebetweenvectors(v1::Point3D, v2::Point3D)\n\nCalclates anglebetweenvectors\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.axes3D","page":"Index","title":"Thebes.axes3D","text":"axes3D(n=100)\n\n\n\n\n\n","category":"function"},{"location":"functionindex/#Thebes.carpet","page":"Index","title":"Thebes.carpet","text":"carpet(n; kind=:circular)\n\nDraw a carpet centered at the origin, using current Luxor parameters.\n\n\n\n\n\n","category":"function"},{"location":"functionindex/#Thebes.cartesiantospherical-Tuple{Any,Any,Any}","page":"Index","title":"Thebes.cartesiantospherical","text":"cartesiantospherical(x, y, z)\n\nReturn (phi, rho, theta) of (x, y, z).\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.dotproduct3D-Tuple{Point3D,Point3D}","page":"Index","title":"Thebes.dotproduct3D","text":"dotproduct3D(a::Point3D, b::Point3D)\n\nFinds the dot product of a and b\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.drawunitbox","page":"Index","title":"Thebes.drawunitbox","text":"drawunitbox(n=100, action=:stroke)\n\n\n\n\n\n","category":"function"},{"location":"functionindex/#Thebes.face-Tuple{Object,Any}","page":"Index","title":"Thebes.face","text":"face(m::Object, n)\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.helloworld-Tuple{}","page":"Index","title":"Thebes.helloworld","text":"helloworld()\n\nReset all the things. The equivalent of typing:\n\neyepoint(100, 100, 100)\ncenterpoint(0, 0, 0)\nuppoint(0, 0, 10)\nperspective(0)\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.magnitude-Tuple{Point3D}","page":"Index","title":"Thebes.magnitude","text":"magnitude(a::Point3D)\n\nCalculates magnitude of a.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.make","page":"Index","title":"Thebes.make","text":"make(primitive, name=\"unnamed\")\n\nprimitive contains two arrays, an array of 3D points, and an array of faces, where each face is a list of vertex numbers.\n\nReturns a Object.\n\nExample\n\nmake(Cube, \"cube\")\n\nreturns a Object object containing an array of vertices, and array of faces, and an array of labels.\n\n@draw begin\n    tol = 0.001\n    a = []\n    for t in -2pi:tol:2pi\n        push!(a, Point3D((50 + cos(5t)) * cos(3t), (50 + cos(5t)) * sin(2t), sin(5t)))\n    end\n    Knot = make((a, []), \"knot\")\n    pin(Knot)\nend\n\n\n\n\n\n","category":"function"},{"location":"functionindex/#Thebes.newprojection","page":"Index","title":"Thebes.newprojection","text":"newprojection(ipos::Point3D, center::Point3D, up::Point3D, perspective=0.0)\n\nDefine a new Projection:\n\nipos is the eye position\ncenter is the 3D point to appear in the center of the 2D image\nup is a point that is to appear vertically above the center\n\nIf perspective is 0.0 (the default) the projection is parallel. Otherwise it's a vague magnification factor for perspective projections.\n\nThe three vectors U, V, W, and the three scalar products, ue, ve, and we:\n\nu is at right angles to line of sight w, and to t-e, so it corresponds to\n\nthe x axis of the 2D image\n\nv is at right angles to u and to the line of sight, so it's the y axis of the\n\n2D image\n\nw is the line of sight\nwe is the projection of the eye position onto w\nue is the projection of the eye position onto that x-axis\nve is the projection of the eye position onto that y axis\n\n\n\n\n\n","category":"function"},{"location":"functionindex/#Thebes.objecttopoly-Tuple{Object}","page":"Index","title":"Thebes.objecttopoly","text":"objecttopoly(m::Object)\n\nReturn a list of 2D points representing the 3D Object in m.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.pin-Tuple{Array{Point3D,1}}","page":"Index","title":"Thebes.pin","text":"pin(p3_1::Point3D, p3_2::Point3D)\n\nDraw an array of 3D points.\n\nThe default action is to draw a polygon through all the points.\n\nThe gfunction can access the 3D points as the first argument, the two 2D points in the second argument.\n\nhelix = [Point3D(100cos(θ), 100sin(θ), 20θ) for θ in 0:π/12:4π]\na_box = pin(helix, gfunction =\n    (p3list, p2list) -> prettypoly(p2list, :stroke)\n    )\n\nReturns the list of 2D points.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.pin-Tuple{Object}","page":"Index","title":"Thebes.pin","text":"pin(m::Object;\n    gfunction = (v, f, l; kwargs... ) -> simplegfunction(v, f, l; kwargs...))\n\nDraw an object, calling a gfunction, the default is simplegfunction().\n\nTo define and change the default gfunction:\n\nfunction mygfunction(vertices, faces, labels; action=:fill)\n    setlinejoin(\"bevel\")\n    if !isempty(faces)\n        @layer begin\n            for (n, p) in enumerate(faces)\n                 @layer begin\n                     isodd(n) ? sethue(\"grey30\") : sethue(\"grey90\")\n                     setopacity(0.5)\n                     poly(p, action)\n                 end\n                 sethue(\"black\")\n                 setline(0.5)\n                 poly(p, :stroke, close=true)\n             end\n        end\n    end\nend\n\n@svg begin\n    helloworld()\n    object = make(Cube)\n    setscale!(object, 100, 100, 100)\n    rotateby!(object, object.vertices[1], rand(), rand(), rand())\n    sortfaces!(object)\n    pin(object, gfunction = mygfunction)\nend\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.pin-Tuple{Point3D,Point3D}","page":"Index","title":"Thebes.pin","text":"pin(p3_1::Point3D, p3_2::Point3D)\n\nDraw two 3D points.\n\nThe default action is to draw a line between two points.\n\nThe gfunction can access the 3D points as the first argument, the two 2D points in the second argument.\n\npin(p, Point3D(50cos(θ), 50sin(θ), p.z),\n    gfunction = (p3s, p2s) -> begin\n        line(p2s..., :stroke)\n    end)\n\n\nReturns the two 2D points.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.pin-Tuple{Point3D}","page":"Index","title":"Thebes.pin","text":"pin(pt::Point3D;\n    gfunction = (p3, p2) -> circle(p2, 1, :stroke))\n\nDraw a single 3D point on the current Luxor drawing.\n\nThe default graphic is a circle. You can define others using a custom gfunction, which takes two arguments: the 3D point and its 2D counterpoint.\n\nFor example, this call draws a circle whose radius is larger if the point is nearer to the eye.\n\npin(p, gfunction = (p3, p2) -> begin\n    d = distance(p3, eyepoint())\n    circle(p2, rescale(d, 0, 300, 20, 5), :fill)\n    end\n    )\n\nReturns the 2D point.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.project-Tuple{Point3D}","page":"Index","title":"Thebes.project","text":"project(P::Point3D)\n\nProject a 3D point onto a 2D surface, as defined by the current projection.\n\nTODO Currently this returns 'nothing' if the point is behind the eyepoint. This makes handling the conversion a bit harder, though, since the function now returns either a 2D Luxor point or nothing. This will probably change.\n\nusing Thebes, Luxor\n\n@svg begin\n    eyepoint(Point3D(250, 250, 100))\n    centerpoint(Point3D(0, 0, 0))\n    uppoint(Point3D(0, 0, 1))\n    sethue(\"grey50\")\n    carpet(300)\n    axes3D(100)\n    sethue(\"red\")\n    for i in 1:30\n        randpoint3D = Point3D(rand(0.0:150, 3)...)\n        sethue(\"red\")\n        pt1 = pin(randpoint3D)\n        if pt1 != nothing\n            circle(pt1, 5, :fill)\n        end\n    end\nend\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.rotateX-Tuple{Point3D,Any}","page":"Index","title":"Thebes.rotateX","text":"rotateX(pt3D::Point3D, rad)\n\nReturn a new point resulting from rotating the point around the x axis by an angle in radians.\n\nRotations are anticlockwise when looking along axis from 0 to +axis.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.rotateY-Tuple{Point3D,Any}","page":"Index","title":"Thebes.rotateY","text":"rotateY(pt3D::Point3D, rad)\n\nReturn a new point resulting from rotating the point around the y axis by an angle in radians.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.rotateZ-Tuple{Point3D,Any}","page":"Index","title":"Thebes.rotateZ","text":"rotateZ(pt3D::Point3D, rad)\n\nReturn a new point resulting from rotating the point around the z axis by an angle in radians.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.rotateby!-Tuple{Object,Any,Any,Any}","page":"Index","title":"Thebes.rotateby!","text":"rotateby!(m::Object, angleX, angleY, angleZ)\n\nRotate an object around the x, y, and/or z axis by angleX, angleY, angleZ.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.rotateby!-Tuple{Object,Point3D,Any,Any,Any}","page":"Index","title":"Thebes.rotateby!","text":"rotateby!(m::Object, pt::Point3D, angleX, angleY, angleZ)\n\nRotate an object around a point by angleX, angleY, angleZ.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.rotateby-Tuple{Object,Any,Any,Any}","page":"Index","title":"Thebes.rotateby","text":"rotateby(m::Object, angleX, angleY, angleZ)\n\nRotate a copy of the object by angleX, angleY, angleZ.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.rotateby-Tuple{Object,Point3D,Any,Any,Any}","page":"Index","title":"Thebes.rotateby","text":"rotateby(m::Object, pt::Point3D, angleX, angleY, angleZ)\n\nRotate a copy of the object around a point by angleX, angleY, angleZ.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.rotateby-Tuple{Point3D,Any,Any,Any}","page":"Index","title":"Thebes.rotateby","text":"rotateby(pt::Point3D, angleX, angleY, angleZ)\n\nReturn a new point resulting from rotating the specified point around the x, y, and z axes by angleX, angleY, angleZ.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.rotateby-Tuple{Point3D,Point3D,Any,Any,Any}","page":"Index","title":"Thebes.rotateby","text":"rotateby(newpt::Point3D, existingpt::Point3D, angleX, angleY, angleZ)\n\nReturn a new point resulting from rotating the point by angleX, angleY, angleZ around another point.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.setposition!-Tuple{Array{Point3D,1},Point3D}","page":"Index","title":"Thebes.setposition!","text":"setposition!(ptlist::Point3D, pt::Point3D)\n\nMove points by a vector..\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.setposition!-Tuple{Object,Any,Any,Any}","page":"Index","title":"Thebes.setposition!","text":"setposition!(m::Object, x, y, z)\nsetposition!(m::Object, pt::Point3D)\n\nSet the position of object to Point3D(x, y, z).\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.setposition-Tuple{Object,Any,Any,Any}","page":"Index","title":"Thebes.setposition","text":"setposition(m::Object, x, y, z)\nsetposition(m::Object, pt::Point3D)\n\nSet the position of a copy of the object to Point3D(x, y, z).\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.setscale!-Tuple{Object,Any,Any,Any}","page":"Index","title":"Thebes.setscale!","text":"setscale!(m::Object, x, y, z)\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.simplegfunction-Tuple{Any,Any,Any}","page":"Index","title":"Thebes.simplegfunction","text":"simplegfunction(vertices, faces, labels; action=:stroke)\n\nIn a Luxor drawing, draw the 2D vertices and faces, using alternating grey shades.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.sortfaces!-Tuple{Object}","page":"Index","title":"Thebes.sortfaces!","text":"sortfaces!(m::Object;\n    eyepoint::Point3D=Point3D(0, 0, 0))\n\nFind the averages of the z values of the faces in Object, and sort the faces of m so that the faces are in order of nearest (highest) z relative to eyepoint...\n\nor something like that ? not sure how this works\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.sphericaltocartesian-Tuple{Any,Any,Any}","page":"Index","title":"Thebes.sphericaltocartesian","text":"sphericaltocartesian(rho, theta, phi)\n\nReturn Point3D(x, y, z) of (rho, theta, phi).\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.surfacenormal-Tuple{Any}","page":"Index","title":"Thebes.surfacenormal","text":"surfacenormal(ptlist)\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#Thebes.text3D-Tuple{Any,Point3D}","page":"Index","title":"Thebes.text3D","text":"text3D(str, pt::Point3D;\n    halign=:left,\n    valign=:baseline,\n    rotation = (0, 0, 0)))\n\nDraw text in 3D.\n\n\n\n\n\n","category":"method"},{"location":"objects/","page":"Objects","title":"Objects","text":"DocTestSetup = quote\n    using Thebes, Luxor, Colors\n    end","category":"page"},{"location":"objects/#Objects","page":"Objects","title":"Objects","text":"","category":"section"},{"location":"objects/","page":"Objects","title":"Objects","text":"So far we've been drawing individual points and lines. This gets tiresome when you have a lot of them. Fortunately, Thebes has a few features for handling larger groups of points.","category":"page"},{"location":"objects/#Making-objects","page":"Objects","title":"Making objects","text":"","category":"section"},{"location":"objects/","page":"Objects","title":"Objects","text":"You make an 3D object using make(), and then use pin() to throw it at the 2D canvas.","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"make() expects an array of 3D points, an (optional) array of face definitions, and an (optional) array of labels, plus an (optional) name. These arrays let you link faces with vertices. It returns an Object.","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"So after:","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"make(Cube, \"cube\")","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"you'll get:","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"Object(\n    Point3D[\n        Point3D(-0.5, 0.5, -0.5),\n        Point3D(0.5, 0.5, -0.5),\n        Point3D(0.5, -0.5, -0.5),\n        Point3D(-0.5, -0.5, -0.5),\n        Point3D(-0.5, 0.5, 0.5),\n        Point3D(0.5, 0.5, 0.5),\n        Point3D(0.5, -0.5, 0.5),\n        Point3D(-0.5, -0.5, 0.5)\n    ],\n\n    [[1, 2, 3, 4],\n     [2, 6, 7, 3],\n     [6, 5, 8, 7],\n     [5, 1, 4, 8],\n     [1, 5, 6, 2],\n     [4, 3, 7, 8]],\n\n     [1, 2, 3, 4, 5, 6],\n\n     \"cube\")","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"The default rendering uses shades of grey.","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"using Thebes, Luxor # hide\nDrawing(600, 300, \"assets/figures/simplecubeobject.svg\") # hide\nbackground(\"white\") # hide\norigin() # hide\nhelloworld() # hide\n\neyepoint(10, 10, 10)\nperspective(3000)\ncube = make(Cube, \"cube\")\npin(cube)\n\nfinish() # hide\nnothing # hide","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"(Image: simple cube object)","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"Here's a very simple example of how you might make an object.","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"using Thebes, Luxor # hide\nDrawing(600, 300, \"assets/figures/object1.svg\") # hide\nbackground(\"white\") # hide\norigin() # hide\nhelloworld() # hide\n\ntol = 0.001\na = Point3D[]\nfor t in -2pi:tol:2pi\n    push!(a, Point3D((100 + cos(5t)) * cos(3t), (100 + cos(5t)) * sin(2t), sin(5t)))\nend\nsethue(\"darkorange\")\nknot = make([a, []], \"knot\")\n\npin(knot, gfunction = (args...) -> poly(args[1], :stroke))\n\nfinish() # hide\nnothing # hide","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"(Image: point example)","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"The gfunction here receives the vertices, faces, and labels, but the faces and labels are empty, so this simple pin only needs to draw a polygon through the vertices.","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"It's obviously not something you'd want to do \"by hand\" very often. Fortunately there are plenty of people who are prepared to make 3D objects and distribute them in standard file formats, via the internet. Thebes knows about one of these formats, the .OFF file format. So there are a few objects already available for you to use directly.","category":"page"},{"location":"objects/#Using-objects","page":"Objects","title":"Using objects","text":"","category":"section"},{"location":"objects/","page":"Objects","title":"Objects","text":"The following objects have already been loaded (from data/objects.jl) when Thebes starts:","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"Cube, Tetrahedron, Pyramid, AxesWire, Carpet","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"using Thebes, Luxor # hide\nDrawing(800, 300, \"assets/figures/moreobjects.svg\") # hide\nbackground(\"white\") # hide\norigin() # hide\nsethue(\"blue\") # hide\nhelloworld() # hide\n\nt = Tiler(600, 300, 1, 5)\nfor (n, o) in enumerate([Cube, Tetrahedron, Pyramid, AxesWire, Carpet])\n    @layer begin\n        translate(first.(t)[n])\n        object = make(o, string(o))\n        setscale!(object, 10, 10, 10)\n        pin(object)\n    end\nend\n\nfinish() # hide\nnothing # hide","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"(Image: more objects)","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"You can load a few more objects by including the moreobjects.jl file:","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"include(\"data/moreobjects.jl\")","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"I quite like the occasional geodesic:","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"using Thebes, Luxor # hide\n\ninclude(dirname(pathof(Thebes)) * \"/../data/moreobjects.jl\")\n\nDrawing(600, 600, \"assets/figures/geodesic.svg\") # hide\nbackground(\"white\") # hide\norigin() # hide\nsethue(\"blue\") # hide\nhelloworld() # hide\neyepoint(150, 150, 150)\n\nsetopacity(0.7)\nobject = make(geodesic, \"geodesic\")\npin(setscale!(object, 200, 200, 200), gfunction = (args...) -> begin\n    vertices, faces, labels = args\n    setlinejoin(\"bevel\")\n    if !isempty(faces)\n        @layer begin\n            for (n, p) in enumerate(faces)\n                randomhue()\n                poly(p, :fillpreserve, close=true)\n                sethue(\"grey20\")\n                strokepath()\n            end\n        end\n    end\nend)\n\nfinish() # hide\nnothing # hide","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"(Image: geodesic)","category":"page"},{"location":"objects/#Rendering-objects","page":"Objects","title":"Rendering objects","text":"","category":"section"},{"location":"objects/","page":"Objects","title":"Objects","text":"To render an object, there are many choices you can make about how to draw the faces and the vertices. Again, you do this with a gfunction. For objects, the gfunction will be more complex than for points and lines. It takes lists of vertices, faces, labels, and colors. Here's a generic example:","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"using Thebes, Luxor # hide\nDrawing(600, 500, \"assets/figures/object2.svg\") # hide\n\nfunction mygfunction(vertices, faces, labels; action=:fill)\n    cols = [Luxor.julia_green, Luxor.julia_red, Luxor.julia_purple, Luxor.julia_blue]\n    if !isempty(faces)\n        @layer begin\n            for (n, p) in enumerate(faces)\n\n                @layer begin\n                    setopacity(0.1)\n                    sethue(cols[mod1(n, end)])\n                    poly(p, close = true, action)\n                end\n\n                sethue(\"white\")\n                setline(0.5)\n                poly(p, :stroke, close=true)\n\n            end\n        end\n    end\nend\n\nbackground(\"black\")\norigin()\nsetlinejoin(\"bevel\")\neyepoint(Point3D(150, 150, 20))\naxes3D(20)\n\nobject = make(Pyramid, \"Pyramid\")\n\nsetscale!(object, 100, 100, 100)\n\npin(object, gfunction = mygfunction)\n\nfinish() # hide\nnothing # hide","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"(Image: object)","category":"page"},{"location":"objects/#Faces","page":"Objects","title":"Faces","text":"","category":"section"},{"location":"objects/","page":"Objects","title":"Objects","text":"The faces are drawn in the order in which they were defined. But to be a realistic 3D drawing, the faces should be drawn so that the ones nearest the viewer are drawn last, hiding the ones that can't be seen.","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"note: Note\nThis is why Thebes is more of a wireframe tool than any kind of genuine 3D application. Use Makie.jl. Or program Blender with Julia.","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"In theory it's possible to do some quick calculations on an object to sort the faces into the correct order for a particular viewpoint. The sortfaces!() function tries to do that. For simple objects you could probably get by.","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"using Thebes, Luxor # hide\nDrawing(600, 500, \"assets/figures/sortsurfaces.svg\") # hide\n\nfunction mygfunction(vertices, faces, labels; action=:fill)\n    cols = [Luxor.julia_green, Luxor.julia_red, Luxor.julia_purple, Luxor.julia_blue]\n    if !isempty(faces)\n        @layer begin\n            for (n, p) in enumerate(faces)\n\n                @layer begin\n                    sethue(cols[mod1(n, end)])\n                    poly(p, close = true, action)\n                end\n\n                sethue(\"white\")\n                setline(0.5)\n                poly(p, :stroke, close=true)\n\n            end\n        end\n    end\nend\n\nbackground(\"black\")\norigin()\nsetlinejoin(\"bevel\")\neyepoint(Point3D(150, 150, 150))\nperspective(0)\naxes3D(20)\n\nt = Tiler(600, 600, 1, 2)\n\nobject = make(Cube, \"cube\")\n\nsetscale!(object, 100, 100, 100)\nsetposition!(object, Point3D(0, -200, 0))\n\npin(object, gfunction = mygfunction)\n\nsetposition!(object, Point3D(0, 400, 0))\nsortfaces!(object, eyepoint=eyepoint())\npin(object, gfunction = mygfunction)\n\nfinish() # hide\nnothing # hide","category":"page"},{"location":"objects/","page":"Objects","title":"Objects","text":"(Image: object)","category":"page"},{"location":"text/","page":"Text","title":"Text","text":"DocTestSetup = quote\n    using Thebes, Luxor, Colors\n    end","category":"page"},{"location":"text/#Text","page":"Text","title":"Text","text":"","category":"section"},{"location":"text/","page":"Text","title":"Text","text":"Displaying text is often difficult for applications, since it depends on font technology, which can be awkward and platform-dependent. For more information about using fonts, you should refer to the chapter in the Luxor documentation. Thebes provides a text3D() function that draws text in a 3D environment.","category":"page"},{"location":"text/","page":"Text","title":"Text","text":"Specify the location of the text, and optionally supply rotation (a tuple of three angles for x, y, and z) and alignment.","category":"page"},{"location":"text/","page":"Text","title":"Text","text":"using Thebes, Luxor # hide\nDrawing(600, 500, \"assets/figures/text1.svg\") # hide\n\nfontsize(50)\n\nbackground(\"black\")\norigin()\nsetlinejoin(\"bevel\")\neyepoint(Point3D(250, 250, 250))\nperspective(0)\nsethue(\"white\")\naxes3D(20)\n\nfontsize(100)\n\n\ntext3D(\" Julia 1\", Point3D(0, 0, 0), rotation=(π/2, 0, π))\n\ntext3D(\" Julia 2\", Point3D(0, 0, 0), rotation=(π/2, 0, π/2))\n\ntext3D(\" Julia 3\", Point3D(0, 0, 0), rotation=(π/2, 0, 3π/2))\n\ntext3D(\" Julia 4\", Point3D(0, 0, 0), rotation=(π/2, 0, 0), halign=:right)\n\nfinish() # hide\nnothing # hide","category":"page"},{"location":"text/","page":"Text","title":"Text","text":"(Image: text )","category":"page"},{"location":"text/","page":"Text","title":"Text","text":"By default the text starts at the origin and runs along the x-axis.","category":"page"},{"location":"text/","page":"Text","title":"Text","text":"You can use Luxor's tools for text placement, such as textextents(), such as they are.","category":"page"},{"location":"text/","page":"Text","title":"Text","text":"using Thebes, Luxor, Colors # hide\nDrawing(600, 500, \"assets/figures/text2.svg\") # hide\nbackground(\"black\")\norigin()\neyepoint(Point3D(250, 250, 550))\nperspective(500)\n\nfontsize(50)\n\nte = textextents(\"Julia\")\n\nfor y in -1200:te[3]:1200\n    for x in -1200:te[4]:1200\n            sethue(HSB(mod(x*y, 360), .8, .8))\n            text3D(\"Julia\", Point3D(x, y, 0), rotation=(0, 0, π/2))\n    end\nend\nfinish() # hide\nnothing # hide","category":"page"},{"location":"text/","page":"Text","title":"Text","text":"(Image: text )","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"DocTestSetup = quote\n    using Thebes, Luxor, Colors\n    end","category":"page"},{"location":"basics/#The-basics","page":"The basics","title":"The basics","text":"","category":"section"},{"location":"basics/","page":"The basics","title":"The basics","text":"Thebes.jl is a small package that adds some simple 3D features to Luxor.jl.","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"note: Note\nAnother reminder: Thebes.jl is capable of a few wireframe constructions in 3D. Don't expect a comprehensive range of 3D modelling and rendering tools. Use Makie.jl!","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"The 3D world of Thebes is superimposed on the 2D world of Luxor:","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"using Thebes, Luxor # hide\nDrawing(600, 300, \"assets/figures/threed.svg\") # hide\nbackground(\"white\") # hide\norigin() # hide\nsethue(\"blue\") # hide\nhelloworld() # hide\nrulers() # a Luxor fuction\naxes3D() # a Thebes function\n\nfinish() # hide\nnothing # hide","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"(Image: point example)","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"There are two main things you have to know in order to draw in 3D:","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"the Point3D type specifies the x, y, and z coordinates of a point in 3D space.\nthere's a function called pin() that places the 3D points on the Luxor drawing surface.","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"note: Note\npin() can perhaps be thought of as \"pinning\" a 3D coordinate onto the 2D flat drawing surface. If I think of a better name for this function, I might change it, but I wanted to avoid everything obvious, like \"draw\", \"render\", \"display\", etc.","category":"page"},{"location":"basics/#A-simple-example","page":"The basics","title":"A simple example","text":"","category":"section"},{"location":"basics/","page":"The basics","title":"The basics","text":"Here's a complete example showing Thebes and Luxor working:","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"using Thebes, Luxor\nDrawing(600, 300, \"assets/figures/simpleexample.svg\")\nsetline(1)\nbackground(\"white\")\norigin()\naxes3D()\n\np1 = Point3D(100, 20, 0)\n\nloc = pin(p1)\n\nlabel(\"there it is!\", :e, loc + (4, 4), offset=10, leader=true)\n\nfinish()\nnothing # hide","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"(Image: point example)","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"Behind the scenes, there's a current viewing projection, but you don't need to worry about it yet.","category":"page"},{"location":"basics/#Point-cloud","page":"The basics","title":"Point cloud","text":"","category":"section"},{"location":"basics/","page":"The basics","title":"The basics","text":"We can do lots of these - here's half a million or so.","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"using Thebes, Luxor # hide\nDrawing(600, 300, \"assets/figures/pointcloud.png\") #hide\norigin() # hide\nbackground(\"black\")\nsetopacity(0.5)\nsethue(\"gold\")\nc = pin.([Point3D(randn() * 50, randn() * 50, randn() * 50)\n    for x in 1:75, y in 1:75, z in 1:75], gfunction = (pt3, pt2) -> begin\n        circle(pt2, 1, :fill)\n        end)\naxes3D()\nfinish() # hide\nnothing # hide\nlength(c)","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"(Image: point cloud)","category":"page"},{"location":"basics/#Dots","page":"The basics","title":"Dots","text":"","category":"section"},{"location":"basics/","page":"The basics","title":"The basics","text":"Let's draw a helix:","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"using Thebes, Luxor # hide\nDrawing(600, 300, \"assets/figures/helix1.svg\") #hide\nbackground(\"white\") # hide\norigin() # hide\naxes3D()\n\nhelix = [Point3D(100cos(θ), 100sin(θ), 10θ) for θ in 0:π/24:4π]\n\npin.(helix)\n\nfinish()\nnothing # hide","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"(Image: point example)","category":"page"},{"location":"basics/#gfunctions","page":"The basics","title":"gfunctions","text":"","category":"section"},{"location":"basics/","page":"The basics","title":"The basics","text":"It's true that this default appearance of a 3D point is pretty basic. But you can modify the graphics drawn at each location by passing a function to the pin() function's optional gfunction keyword argument.","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"Suppose you want to draw a randomly colored circle at the location, with radius 5 units.","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"using Thebes, Luxor # hide\nDrawing(600, 300, \"assets/figures/helix2.svg\") #hide\nbackground(\"white\") # hide\norigin() # hide\naxes3D()\n\nhelix = [Point3D(100cos(θ), 100sin(θ), 10θ) for θ in 0:π/24:4π]\n\npin.(helix, gfunction = (_, pt) -> begin\n    randomhue()\n    circle(pt, 5, :fill)\n    end)\n\nfinish()\nnothing # hide","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"(Image: point example)","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"The gfunction require two arguments: the first contains the 3D point, the second contains the 2D point. The function then has the responsibility to draw the graphics for that point. This gives us more control over the rendering of the points. If you want Luxor stars, you use the second argument - you don't need the first:","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"using Thebes, Luxor # hide\nDrawing(600, 300, \"assets/figures/helix2stars.svg\") #hide\nbackground(\"white\") # hide\norigin() # hide\naxes3D()\n\nhelix = [Point3D(100cos(θ), 100sin(θ), 10θ) for θ in 0:π/24:4π]\n\npin.(helix, gfunction = (_, pt) -> begin\n    randomhue()\n    star(pt, 5, 5, 0.5, 0.0, :fill)\n    end)\n\nfinish()\nnothing # hide","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"(Image: point stars example)","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"The next, slightly more complicated, gfunction calculates the distance of the point from the origin, and then draws the circle with a radius that reflects this. The function therefore requires both the original 3D point (in the first argument p3) and the second argument (in p2), its 2D projection.","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"using Thebes, Luxor # hide\nDrawing(600, 300, \"assets/figures/helix3.svg\") #hide\nbackground(\"white\") # hide\norigin() # hide\naxes3D()\n\nhelix = [Point3D(100cos(θ), 100sin(θ), 10θ) for θ in 0:π/24:4π]\n\npin.(helix, gfunction = (p3, p2) -> begin\n    d = rescale(distance(p3, Point3D(0, 0, 0)), 100, 200, 1, 10)\n    circle(p2, d, :fill)\n    end)\n\n\nfinish()\nnothing # hide","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"(Image: point example)","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"note: Note\nNotice that all the graphics are 2D graphics. This isn't real 3D, remember. The human brain is quite adaptable, though.","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"In this example, each point is drawn twice, to make shadows.","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"using Thebes, Luxor\n\nDrawing(600, 500,  \"assets/figures/points-shadows.svg\")\norigin()\n    background(\"grey10\")\n    eyepoint(Point3D(250, 250, 100))\n    sethue(\"grey50\")\n    carpet(300)\n    axes3D(100)\n    sethue(\"red\")\n    for i in 1:300\n        randpoint3D = Point3D(rand(0.0:200, 3)...)\n        sethue(\"red\")\n        pin(randpoint3D,\n            gfunction = (p3, p2) -> circle(p2, 2, :fill))\n        sethue(\"grey30\")\n        pin(Point3D(randpoint3D.x, randpoint3D.y, 0),\n            gfunction = (p3, p2) -> circle(p2, 2, :fill))\n    end\nfinish() # hide\nnothing # hide","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"(Image: point example 2)","category":"page"},{"location":"basics/#Lines","page":"The basics","title":"Lines","text":"","category":"section"},{"location":"basics/","page":"The basics","title":"The basics","text":"Dots are all very well, but suppose we wanted to draw a line? pin() also accepts two 3D points.","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"This code uses the same points from the helix, this time drawing a line from each point to the nearest point on the vertical z axis.","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"using Thebes, Luxor # hide\nDrawing(600, 300, \"assets/figures/helix4.svg\") #hide\nbackground(\"white\") # hide\norigin() # hide\naxes3D()\n\nhelix = [Point3D(150cos(θ), 150sin(θ), 5θ) for θ in 0:π/48:4π]\n\nsetline(0.5)\n\nfor p in helix\n    pin(p, Point3D(0, 0, p.z))\nend\n\nfinish()\nnothing # hide","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"(Image: point example)","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"The default gfunction's arguments consist of two pairs of points (a pair of 3D points, and a pair of 2D points), not just two points. Luxor's trusty old line() function connects the 2D pair.","category":"page"},{"location":"basics/#When-things-go-wrong","page":"The basics","title":"When things go wrong","text":"","category":"section"},{"location":"basics/","page":"The basics","title":"The basics","text":"In 2D graphics, there can occasionally be a few problems caused when values get close to zero or infinity. The same thing is true for 3D too, when the coordinates start stressing out the projecting equations. Really good 3D software will prevent this happening. In Thebes, though, you may occasionally see glitches. You're only seeing half the \"world\" that's in front of you  - there's nearly a whole half-world falling being the eye-position, and this means that some points don't get succesfully drawn.","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"In general, if the pin() function can't display a point, it will probably just drop it and carry on, rather than attempt to draw things in impossible locations or straight lines that curve in space. So if you notice parts of your drawing missing, the easiest thing to do is to move the eyepoint further away, and hope that any lines don't end up too close to it.","category":"page"},{"location":"basics/#Conversions","page":"The basics","title":"Conversions","text":"","category":"section"},{"location":"basics/","page":"The basics","title":"The basics","text":"The convert() function provides a useful way to convert 2D coordinates to 3D. If you can generate your points in 2D, then you can convert them to 3D, and then  use pin() to project them back into two dimensions. This example shows how to draw the Julia logo dots. We can't use proper circles (because there are no Bezier paths in Thebes yet), so we use ngon() with enough points.","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"using Thebes, Luxor # hide\n\nfunction juliadots3D(origin::Point3D, rotation=(0, 0, 0);\n    radius=100)\n    dots = Array{Point3D, 1}[]\n    points = ngon(O, radius, 3, -π/3, vertices=true)\n    @layer begin\n        for (n, p) in enumerate(points)\n            push!(dots, origin .+ convert.(Point3D, ngon(p, 0.75 * radius, 60)))\n        end\n        for (n, d) in enumerate(dots)\n            sethue([Luxor.julia_purple, Luxor.julia_green, Luxor.julia_red][mod1(n, end)])\n            # rotate about an arbitrary point (first pt of green dot)\n            d1 = rotateby.(d, dots[2][1], rotation...)\n            pin(d1, gfunction = (_, pts) -> poly(pts, close=true, :fill))\n        end\n    end\nend\n\nfunction juliaroom()\n    Drawing(500, 500, \"assets/figures/juliaroom.svg\")\n    origin()\n    background(\"black\")\n    helloworld()\n    eyepoint(1200, 1200, 1200)\n    perspective(800)\n    for x in 30:50:500\n        for y in 30:50:500\n                juliadots3D(Point3D(x, y, 0), (0, 0, 0), radius=12)\n        end\n    end\n    for x in 30:50:500\n        for z in 30:50:500\n                juliadots3D(Point3D(x, 0, z), (π/2, π/2, 0), radius=12)\n        end\n    end\n    for y in 30:50:500\n        for z in 30:50:500\n                juliadots3D(Point3D(0, y, z), (0, π/2, -π), radius=12)\n        end\n    end\n\n    axes3D(300)\n    finish()\nend\n\njuliaroom()\nnothing # hide\n","category":"page"},{"location":"basics/","page":"The basics","title":"The basics","text":"(Image: the julia room)","category":"page"},{"location":"polys/","page":"Polygons and planes","title":"Polygons and planes","text":"DocTestSetup = quote\n    using Thebes, Luxor, Colors\n    end","category":"page"},{"location":"polys/#Polygons-and-planes","page":"Polygons and planes","title":"Polygons and planes","text":"","category":"section"},{"location":"polys/","page":"Polygons and planes","title":"Polygons and planes","text":"The pin() function accepts an array of 3D points as well. In this case, the default graphical treatment is to apply the Luxor.poly(... :stroke) function to the 2D points.","category":"page"},{"location":"polys/","page":"Polygons and planes","title":"Polygons and planes","text":"This of course isn't always going to work very well, if the 3D points don't lie in a plane, for example, or if you decide to use filling rather than stroking actions.","category":"page"},{"location":"polys/#Mobius","page":"Polygons and planes","title":"Möbius","text":"","category":"section"},{"location":"polys/","page":"Polygons and planes","title":"Polygons and planes","text":"using Thebes, Luxor # hide\n\nfunction makemobius()\n    x(u, v) = (1 + (v/2 * cos(u/2))) * cos(u)\n    y(u, v) = (1 + (v/2 * cos(u/2))) * sin(u)\n    z(u, v) = v/2 * sin(u/2)\n    w = .5\n    st = 2π/200\n    Δ = .05\n    result = Array{Point3D, 1}[]\n    for u in 0:st:2π-st\n        for v in -w:Δ:w\n            p1 = Point3D(x(u,      v + Δ),   y(u,      v + Δ),     z(u,       v + Δ))\n            p2 = Point3D(x(u + st, v + Δ),   y(u + st, v + Δ),     z(u  + st, v + Δ))\n            p3 = Point3D(x(u + st, v),       y(u + st, v),         z(u + st,  v))\n            p4 = Point3D(x(u,      v),       y(u,      v),         z(u,       v))\n            push!(result, [p1, p2, p3, p4])\n        end\n    end\n    return result\nend\n\n# ... in a drawing\nDrawing(600, 600, \"assets/figures/mobiusband.svg\") # hide\norigin() # hide\nbackground(\"black\") # hide\nsetline(0.5) # hide\neyepoint(300, 300, 300)\nperspective(1200)\nmb = makemobius()\nsetopacity(1)\nsethue(\"white\")\nfor p in mb\n    pin(100p, gfunction  = (p3l, p2l) -> begin\n        poly(p2l, :stroke, close=true)\n    end)\nend\nfinish() # hide\nnothing # hide","category":"page"},{"location":"polys/","page":"Polygons and planes","title":"Polygons and planes","text":"(Image: mobius band)","category":"page"},{"location":"polys/#Chessboard","page":"Polygons and planes","title":"Chessboard","text":"","category":"section"},{"location":"polys/","page":"Polygons and planes","title":"Polygons and planes","text":"You can probably risk filling a set of 3D points if they lie in the same plane.","category":"page"},{"location":"polys/","page":"Polygons and planes","title":"Polygons and planes","text":"Here's a simple example. The gfunction here:","category":"page"},{"location":"polys/","page":"Polygons and planes","title":"Polygons and planes","text":"pin(plist,\n    gfunction = (p3, p2) -> begin\n        poly(p2, close=true, :fillpreserve)\n        sethue(\"black\")\n        strokepath()\n    end)","category":"page"},{"location":"polys/","page":"Polygons and planes","title":"Polygons and planes","text":"simply fills the polygon with the current color, then outlines it in black.","category":"page"},{"location":"polys/","page":"Polygons and planes","title":"Polygons and planes","text":"using Thebes, Luxor # hide\nDrawing(600, 300, \"assets/figures/chessboard.svg\") # hide\nbackground(\"white\") # hide\norigin() # hide\nsethue(\"blue\") # hide\nhelloworld() # hide\n\nperspective(1200)\neyepoint(500, 500, 150)\nk = 20\nw, h = 20, 20\nfor x in 1:8\n    for y in 1:8\n        iseven(x + y) ? sethue(\"grey90\") : sethue(\"grey10\")\n        z = 0\n        plist = [\n            Point3D(k * x,     k * y,      z),\n            Point3D(k * x + w, k * y,      z),\n            Point3D(k * x + w, k * y + h,  z),\n            Point3D(k * x,     k * y + h,  z)\n            ]\n        pts = pin(plist, gfunction = (p3, p2) -> begin\n                poly(p2, close=true, :fillpreserve)\n                sethue(\"black\")\n                strokepath()\n            end)\n    end\nend\n\nfinish() # hide\nnothing # hide","category":"page"},{"location":"polys/","page":"Polygons and planes","title":"Polygons and planes","text":"(Image: chess board example)","category":"page"},{"location":"polys/","page":"Polygons and planes","title":"Polygons and planes","text":"The polygon is constructed in plist and then pin() applies its gfunction on it.","category":"page"},{"location":"polys/#Surfaces","page":"Polygons and planes","title":"Surfaces","text":"","category":"section"},{"location":"polys/","page":"Polygons and planes","title":"Polygons and planes","text":"A surface plot like the following also works quite well. It's just that each new polygon hides the ones behind it.","category":"page"},{"location":"polys/","page":"Polygons and planes","title":"Polygons and planes","text":"using Thebes, Luxor, Colors # hide\nDrawing(600, 500, \"assets/figures/surfaceplot.svg\") # hide\nbackground(\"white\") # hide\norigin() # hide\nsethue(\"blue\") # hide\nhelloworld() # hide\n\nperspective(600)\neyepoint(500, 500, 500)\n\nk = 20\nxmax = 4π\nymax = 4π\nst = 0.5\n\nf(x, y) = 2(sin(x) * cos(y)) + (cos(x) * sin(y))\n\nsetline(.5)\n\nfor x in -xmax:st:xmax\n    for y in -ymax:st:ymax\n        sethue(HSB(360rescale(x, -xmax, xmax), .8, .8))\n\n        p1 = Point3D(k * x,         k * y,        k * f(x,      y))\n        p2 = Point3D(k * x,         k * (y + st), k * f(x,      y +st))\n        p3 = Point3D(k * (x + st),  k * (y + st), k * f(x + st, y + st))\n        p4 = Point3D(k * (x + st),  k * y,        k * f(x + st, y))\n        pin([p1, p2, p3, p4], gfunction = (p3s, p2s) -> begin\n            poly(p2s, close=true, :fill)\n            sethue(\"white\")\n            poly(p2s, close=true, :stroke)\n        end)\n    end\nend\n\naxes3D(200)\n\nfinish() # hide\nnothing # hide","category":"page"},{"location":"polys/","page":"Polygons and planes","title":"Polygons and planes","text":"(Image: surface plot example)","category":"page"},{"location":"","page":"Introduction to Thebes","title":"Introduction to Thebes","text":"DocTestSetup = quote\n    using Luxor, Thebes, Dates, Colors\nend","category":"page"},{"location":"#Introduction-to-Thebes","page":"Introduction to Thebes","title":"Introduction to Thebes","text":"","category":"section"},{"location":"","page":"Introduction to Thebes","title":"Introduction to Thebes","text":"Thebes.jl is a small package that provides a few 3D wireframe tools for use with Luxor.jl, a 2D drawing package.","category":"page"},{"location":"","page":"Introduction to Thebes","title":"Introduction to Thebes","text":"Most of my work is 2D in nature, but occasionally I require some graphic elements that are three-dimensional. The Thebes package lets you define a few simple shapes in 3D and project them onto a Luxor drawing, which remains resolutely 2D.","category":"page"},{"location":"","page":"Introduction to Thebes","title":"Introduction to Thebes","text":"note: Note\nDon't set your expectations too high! Thebes.jl merely generates a few simple 3D \"wireframe\" diagrams. For real 3D work, with solid shapes, lighting, textures,  interactivity, and so on, use Makie.jl. Or spend a few months learning Blender...","category":"page"},{"location":"#Installation-and-basic-usage","page":"Introduction to Thebes","title":"Installation and basic usage","text":"","category":"section"},{"location":"","page":"Introduction to Thebes","title":"Introduction to Thebes","text":"Install the package using the package manager at the REPL:","category":"page"},{"location":"","page":"Introduction to Thebes","title":"Introduction to Thebes","text":"] add Thebes","category":"page"},{"location":"","page":"Introduction to Thebes","title":"Introduction to Thebes","text":"To use Thebes, type:","category":"page"},{"location":"","page":"Introduction to Thebes","title":"Introduction to Thebes","text":"using Thebes","category":"page"},{"location":"#Documentation","page":"Introduction to Thebes","title":"Documentation","text":"","category":"section"},{"location":"","page":"Introduction to Thebes","title":"Introduction to Thebes","text":"This documentation was built using Documenter.jl.","category":"page"},{"location":"","page":"Introduction to Thebes","title":"Introduction to Thebes","text":"using Dates # hide\nprintln(\"Documentation built $(Dates.now()) with Julia $(VERSION)\") # hide","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"DocTestSetup = quote\n    using Thebes, Luxor, Colors\n    end","category":"page"},{"location":"tools/#Tools","page":"Tools","title":"Tools","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"There are few useful tools that might help you explore.","category":"page"},{"location":"tools/#Sorting-faces","page":"Tools","title":"Sorting faces","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"Because Thebes isn't really for modelling solid objects, you'll find that drawing them with poly(... :fill) won't give good results.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"Here, the faces of the cuboctahedron weren't defined in the correct order:","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"\nusing Thebes, Luxor, Colors # hide\nDrawing(600, 500, \"assets/figures/sortingfaces.svg\") # hide\nbackground(\"white\") # hide\norigin() # hide\nsethue(\"blue\") # hide\nhelloworld() # hide\neyepoint(200, 200, 200)\n\ninclude(dirname(pathof(Thebes)) * \"/../data/moreobjects.jl\")\n\nobject = make(cuboctahedron, \"solid\")\n\npin(setscale!(object, 100, 100, 100), gfunction = (args...) -> begin\n    vertices, faces, labels = args\n    setlinejoin(\"bevel\")\n    setopacity(0.8)\n    if !isempty(faces)\n        @layer begin\n            for (n, p) in enumerate(faces)\n                sethue([Luxor.julia_green, Luxor.julia_red,\n                    Luxor.julia_purple, Luxor.julia_blue][mod1(n, end)])\n                poly(p, :fillpreserve, close=true)\n                sethue(\"grey20\")\n                strokepath()\n            end\n        end\n    end\nend)\n\n\nfinish() # hide\nnothing # hide","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"(Image: sorting faces)","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"Use sortfaces!() to modify the object such that the faces are sorted according to their distance from the eyepoint (by default).","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"\nusing Thebes, Luxor, Colors # hide\nDrawing(600, 500, \"assets/figures/sortingfaces1.svg\") # hide\nbackground(\"white\") # hide\norigin() # hide\nsethue(\"blue\") # hide\nhelloworld() # hide\neyepoint(200, 200, 200)\n\ninclude(dirname(pathof(Thebes)) * \"/../data/moreobjects.jl\")\n\nobject = make(cuboctahedron, \"solid\")\n\nsortfaces!(object)\n\npin(setscale!(object, 100, 100, 100), gfunction = (args...) -> begin\n    vertices, faces, labels = args\n    setlinejoin(\"bevel\")\n    setopacity(0.8)\n    if !isempty(faces)\n        @layer begin\n            for (n, p) in enumerate(faces)\n                sethue([Luxor.julia_green, Luxor.julia_red,\n                    Luxor.julia_purple, Luxor.julia_blue][mod1(n, end)])\n                poly(p, :fillpreserve, close=true)\n                sethue(\"grey20\")\n                strokepath()\n            end\n        end\n    end\nend)\n\n\nfinish() # hide\nnothing # hide","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"(Image: sorting faces)","category":"page"},{"location":"tools/#Geometry","page":"Tools","title":"Geometry","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"There are some geometry routines - some of them are extensions to the Luxor 2D versions.","category":"page"},{"location":"tools/#Distances","page":"Tools","title":"Distances","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"between\ndistance\nmidpoint","category":"page"},{"location":"tools/#Luxor.between","page":"Tools","title":"Luxor.between","text":"between(p1::Point3D, p2::Point3D, x=0.5)\nbetween((p1::Point3D, p2::Point3D), x=0.5)\n\nFind a point on a line between two 3D points. If x is 0.5, the returned point should be halfway between them.\n\n\n\n\n\n","category":"function"},{"location":"tools/#Luxor.distance","page":"Tools","title":"Luxor.distance","text":"distance(p1::Point3D, p2::Point3D)\n\nReturn the distance between two points.\n\n\n\n\n\n","category":"function"},{"location":"tools/#Luxor.midpoint","page":"Tools","title":"Luxor.midpoint","text":"midpoint(pt1::Point3D, pt2::Point3D)\n\nFind the midpoint between two points. See also between().\n\n\n\n\n\n","category":"function"},{"location":"tools/#Rotations","page":"Tools","title":"Rotations","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"rotateX\nrotateY\nrotateZ\nrotateby!\nrotateby","category":"page"},{"location":"tools/#Thebes.rotateX","page":"Tools","title":"Thebes.rotateX","text":"rotateX(pt3D::Point3D, rad)\n\nReturn a new point resulting from rotating the point around the x axis by an angle in radians.\n\nRotations are anticlockwise when looking along axis from 0 to +axis.\n\n\n\n\n\n","category":"function"},{"location":"tools/#Thebes.rotateY","page":"Tools","title":"Thebes.rotateY","text":"rotateY(pt3D::Point3D, rad)\n\nReturn a new point resulting from rotating the point around the y axis by an angle in radians.\n\n\n\n\n\n","category":"function"},{"location":"tools/#Thebes.rotateZ","page":"Tools","title":"Thebes.rotateZ","text":"rotateZ(pt3D::Point3D, rad)\n\nReturn a new point resulting from rotating the point around the z axis by an angle in radians.\n\n\n\n\n\n","category":"function"},{"location":"tools/#Thebes.rotateby!","page":"Tools","title":"Thebes.rotateby!","text":"rotateby!(m::Object, angleX, angleY, angleZ)\n\nRotate an object around the x, y, and/or z axis by angleX, angleY, angleZ.\n\n\n\n\n\nrotateby!(m::Object, pt::Point3D, angleX, angleY, angleZ)\n\nRotate an object around a point by angleX, angleY, angleZ.\n\n\n\n\n\n","category":"function"},{"location":"tools/#Thebes.rotateby","page":"Tools","title":"Thebes.rotateby","text":"rotateby(pt::Point3D, angleX, angleY, angleZ)\n\nReturn a new point resulting from rotating the specified point around the x, y, and z axes by angleX, angleY, angleZ.\n\n\n\n\n\nrotateby(newpt::Point3D, existingpt::Point3D, angleX, angleY, angleZ)\n\nReturn a new point resulting from rotating the point by angleX, angleY, angleZ around another point.\n\n\n\n\n\nrotateby(m::Object, angleX, angleY, angleZ)\n\nRotate a copy of the object by angleX, angleY, angleZ.\n\n\n\n\n\nrotateby(m::Object, pt::Point3D, angleX, angleY, angleZ)\n\nRotate a copy of the object around a point by angleX, angleY, angleZ.\n\n\n\n\n\n","category":"function"},{"location":"tools/#Position-and-scale","page":"Tools","title":"Position and scale","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"You can change the position or position of objects:","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"setposition!\nsetposition\nsetscale!","category":"page"},{"location":"tools/#Thebes.setposition!","page":"Tools","title":"Thebes.setposition!","text":"setposition!(ptlist::Point3D, pt::Point3D)\n\nMove points by a vector..\n\n\n\n\n\nsetposition!(m::Object, x, y, z)\nsetposition!(m::Object, pt::Point3D)\n\nSet the position of object to Point3D(x, y, z).\n\n\n\n\n\n","category":"function"},{"location":"tools/#Thebes.setposition","page":"Tools","title":"Thebes.setposition","text":"setposition(m::Object, x, y, z)\nsetposition(m::Object, pt::Point3D)\n\nSet the position of a copy of the object to Point3D(x, y, z).\n\n\n\n\n\n","category":"function"},{"location":"tools/#Thebes.setscale!","page":"Tools","title":"Thebes.setscale!","text":"setscale!(m::Object, x, y, z)\n\n\n\n\n\n","category":"function"},{"location":"tools/#Coordinates","page":"Tools","title":"Coordinates","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"Here are some of the less frequently used functions.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"sphericaltocartesian\ncartesiantospherical\n\ndotproduct3D\nmagnitude\nanglebetweenvectors\nsurfacenormal","category":"page"},{"location":"tools/#Thebes.sphericaltocartesian","page":"Tools","title":"Thebes.sphericaltocartesian","text":"sphericaltocartesian(rho, theta, phi)\n\nReturn Point3D(x, y, z) of (rho, theta, phi).\n\n\n\n\n\n","category":"function"},{"location":"tools/#Thebes.cartesiantospherical","page":"Tools","title":"Thebes.cartesiantospherical","text":"cartesiantospherical(x, y, z)\n\nReturn (phi, rho, theta) of (x, y, z).\n\n\n\n\n\n","category":"function"},{"location":"tools/#Thebes.dotproduct3D","page":"Tools","title":"Thebes.dotproduct3D","text":"dotproduct3D(a::Point3D, b::Point3D)\n\nFinds the dot product of a and b\n\n\n\n\n\n","category":"function"},{"location":"tools/#Thebes.magnitude","page":"Tools","title":"Thebes.magnitude","text":"magnitude(a::Point3D)\n\nCalculates magnitude of a.\n\n\n\n\n\n","category":"function"},{"location":"tools/#Thebes.anglebetweenvectors","page":"Tools","title":"Thebes.anglebetweenvectors","text":"anglebetweenvectors(v1::Point3D, v2::Point3D)\n\nCalclates anglebetweenvectors\n\n\n\n\n\n","category":"function"},{"location":"tools/#Thebes.surfacenormal","page":"Tools","title":"Thebes.surfacenormal","text":"surfacenormal(ptlist)\n\n\n\n\n\n","category":"function"},{"location":"views/","page":"Views","title":"Views","text":"DocTestSetup = quote\n    using Thebes, Luxor, Colors\n    end","category":"page"},{"location":"views/#Views-and-perspective","page":"Views","title":"Views and perspective","text":"","category":"section"},{"location":"views/#Eyepoint,-centerpoint...","page":"Views","title":"Eyepoint, centerpoint...","text":"","category":"section"},{"location":"views/","page":"Views","title":"Views","text":"Thebes has a simple view of the world. There's a global \"world\", which is created when you start using it. It's a good idea to check and/or set the viewing parameters when you start a new Luxor document, in case you're inheriting anything odd from a previous run.","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"Here are the functions that control your view of the 3D scene:","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"helloworld()  \neyepoint()  \ncenterpoint()\nperspective()","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"The first one is a useful one to remember: it simply resets all the viewing parameters to the defaults.","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"The eyepoint() function moves the eyepoint, and centerpoint() changes the location that is the center of your view. There's also an uppoint() function, usually sitting above centerpoint, which determines which way is up.","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"So, to see the side view of the helix, continued from the previous chapter, we can just lower our viewpoint a bit, from the default 100 in z down to 50:","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"using Thebes, Luxor # hide\nDrawing(600, 300, \"assets/figures/helix5.svg\") # hide\nbackground(\"white\") # hide\norigin() # hide\n\nhelix = [Point3D(150cos(θ), 150sin(θ), 5θ) for θ in 0:π/48:4π]\n\nsetline(0.5)\n\neyepoint(500, 500, 50)\n\naxes3D()\n\nfor p in helix\n    pin(p, Point3D(0, 0, p.z))\nend\nfinish()\nnothing # hide","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"(Image: point example)","category":"page"},{"location":"views/#Perspective","page":"Views","title":"Perspective","text":"","category":"section"},{"location":"views/","page":"Views","title":"Views","text":"As yet we've seen no perspective. The defaut value of the perspective parameter, as returned by perspective(), is 0. This means that there's none of that foreshortening or converging of lines that head off into the distance. And if you look at a cube, it has that familiar unrealistic appearance of non-perspective view.","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"using Thebes, Luxor # hide\n\nhelloworld() # hide\n\nfunction makecube()\n    cube = [\n        Point3D(1,   1, -1),\n        Point3D(1,  -1, -1),\n        Point3D(-1, -1, -1),\n        Point3D(-1,  1, -1),\n        Point3D(1,   1,  1),\n        Point3D(1,  -1,  1),\n        Point3D(-1, -1,  1),\n        Point3D(-1,  1,  1)]\n    r = Point3D[]\n\n    for e in (\n        [1, 2, 3, 4, 1],\n        [5, 6, 7, 8, 5],\n        [5, 1, 2, 6, 7],\n        [7, 3, 4, 8, 5])\n        append!(r, cube[e])        \n    end\n    return r\nend\n\nDrawing(600, 300, \"assets/figures/cube1.svg\") #hide\nbackground(\"white\") # hide\norigin() # hide\n\npin(50makecube())\n\nfinish()\nnothing # hide","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"(Image: isometric cube example)","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"This little animation views the cube and changes the perspective slowly from 0 up to 1400.","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"(Image: perspective cube example)","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"As the value of perspective increases, the apparent magnification increases, and parallel lines will start to converge.","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"using Thebes, Luxor # hide\n\nhelloworld() # hide\n\nfunction makecube()\n    cube = [\n        Point3D(1,   1, -1),\n        Point3D(1,  -1, -1),\n        Point3D(-1, -1, -1),\n        Point3D(-1,  1, -1),\n        Point3D(1,   1,  1),\n        Point3D(1,  -1,  1),\n        Point3D(-1, -1,  1),\n        Point3D(-1,  1,  1)]\n    r = Point3D[]\n\n    for e in (\n        [1, 2, 3, 4, 1],\n        [5, 6, 7, 8, 5],\n        [5, 1, 2, 6, 7],\n        [7, 3, 4, 8, 5])\n        append!(r, cube[e])        \n    end\n    return r\nend\n\nDrawing(600, 300, \"assets/figures/cube-in-perspective.svg\") #hide\nbackground(\"white\") # hide\norigin() # hide\n\neyepoint(200, 50, 100)\nperspective(150)\npts = pin(50makecube())\n\nsethue(\"red\")\nsetline(0.1)\nfor p1 in pts\n    for p2 in pts\n        p1 == p2 && continue\n        rule(p1, slope(p1, p2))\n    end\nend\n\nfinish() # hide\nnothing # hide\n","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"(Image: cube in perspective)","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"And there are enough converging parallel lines there to give an ancient Egyptian architect nightmares.","category":"page"},{"location":"views/#Orbits","page":"Views","title":"Orbits","text":"","category":"section"},{"location":"views/","page":"Views","title":"Views","text":"To fly around the scene, you can just move the eyepoint around:","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"using Thebes, Luxor, Colors\n\nfunction frame(scene, framenumber, object)\n    background(\"antiquewhite\")\n    setlinejoin(\"bevel\")\n    sethue(\"grey70\")\n    carpet(150)\n    setline(1.0)\n    setopacity(0.7)\n\n    eased_n = rescale(scene.easingfunction(framenumber, 0, 1,\n        scene.framerange.stop), 0, 1, 0, 2π)\n\n    eyepoint(150cos(eased_n), 150sin(eased_n), 30)\n    pin(object)\n    axes3D()\nend\n\nw = h = 400\nmovie1 = Movie(w, h, \"3D movie\")\n\nfunction main()\n    include(\"data/moreobjects.jl\")\n    object = make(cuboctahedron)\n    setscale!(object, 60, 60, 60)\n    animate(movie1,\n        Scene(movie1, (s, f)  -> frame(s, f, object),\n        1:150,\n        easingfunction=easeinoutsine),\n        pathname=\"animation.gif\")\nend\n\nmain()","category":"page"},{"location":"views/","page":"Views","title":"Views","text":"(Image: animation)","category":"page"}]
}
